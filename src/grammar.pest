eoi  = _{ !ANY }  // since EOI does not parse silently, define our own
expr_end = _{ ";" | NEWLINE | eoi }

// Since newlines are sometimes meaningful syntax, we need to specify what 
// whitespace is permitted where

// WHITESPACE = _{ " " | "\\t" | NEWLINE }
// WHITESPACE_NO_NL = _{ " " | "\\t" }

WS_NO_NL = _{ " " | "\\t" }
WS = _{ WS_NO_NL | NEWLINE }



// repl

   repl = _{ WS* ~ expr ~ WS* ~ eoi }

// expression basics

    expr = { block | inline }
        block  = { "{" ~ WS* ~ block_inline* ~ WS* ~ inline? ~ WS* ~ "}" }

        // within an expression block, newlines are meaningful syntax
        block_inline = { inline ~ WS_NO_NL* ~ expr_end } 
        inline = { atom ~ (WS* ~ infix ~ WS* ~ atom)* }

        infix = _{ add | subtract | multiply | divide | assign }
            add = { "+" }
            subtract = { "-" }
            multiply = { "*" }
            divide = { "/" }
            assign = { "<-" }

        atom = _{ 
              kw_function
            | kw_if_else
            | kw_for
            | kw_while
            | kw_repeat
            | call 
            | null
            | boolean_true
            | boolean_false
            | integer_expr
            | number 
            | string_expr 
            | symbol 
            | "(" ~ WS* ~ expr ~ WS* ~ ")"
            | block 
        }

// keyworded (kw) syntax

    kw_function = { "function" ~ WS* ~ list ~ WS* ~ expr }
    kw_if_else = { "if" ~ WS* ~ "(" ~ WS* ~ expr ~ WS* ~ ")" ~ WS* ~ expr ~ WS* ~ ("else" ~ WS* ~ expr)? }
    kw_for = { "for" ~ WS* ~ "(" ~ WS* ~ symbol ~ WS+ ~ "in" ~ WS+ ~ expr ~ WS* ~ ")" ~ WS* ~ expr }
    kw_while = { "while" ~ WS* ~ "(" ~ WS* ~ expr ~ WS* ~ ")" ~ WS* ~ expr }
    kw_repeat = { "repeat" ~ WS* ~ expr }

// reserved value types

    null = { "NULL" }
    boolean_true = { "TRUE" }
    boolean_false = { "FALSE" }

// atomic value types

    number = @{
        "-"?
        ~ ("0" | ASCII_NONZERO_DIGIT ~ ASCII_DIGIT*)
        ~ ("." ~ ASCII_DIGIT*)?
    }

    integer_expr = _{ integer ~ "L" }
        integer = @{ "-"? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT* }

    string_expr = ${ "\"" ~ string ~ "\"" | "'" ~ string ~ "'" }
        string = @{ char* }
        char = {
            !("\"" | "\\") ~ ANY
            | "\\" ~ ("\"" | "\\" | "/" | "b" | "f" | "n" | "r" | "t")
            | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
        }

// symbols & calls

    symbol = _{ symbol_backticked | symbol_ident }
        symbol_backticked = ${ "`" ~ (!"`" ~ ANY)* ~ "`" }
        symbol_ident = ${ ( ASCII_ALPHA | "." | "_" ) ~ ( ASCII_ALPHANUMERIC | "." | "_" )* }

    call = { symbol ~ WS* ~ list }
        list = { "(" ~ ((WS* ~ elem ~ WS* ~ ",")* ~ WS* ~ elem)? ~ WS* ~ ")" }
        ellipsis = { "..." }
        elem = _{ ellipsis | named | symbol | expr }
        named = { symbol ~ WS* ~ "=" ~ WS* ~ expr }